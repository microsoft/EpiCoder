{"idx": 0, "original_code": "''' Unsupervised Out-of-distribution Detection Procedure in Pytorch.\n\nReference:\n[Yu et al. ICCV 2019] Unsupervised Out-of-Distribution Detection by Maximum Classifier Discrepancy (https://arxiv.org/abs/1908.04951)\n'''\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Python\nimport random\n\n# Torch\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nimport torch.optim.lr_scheduler as lr_scheduler\nfrom torch.utils.data.sampler import SubsetRandomSampler\n\n# Torchvison\nfrom torchvision.utils import make_grid\nimport torchvision.transforms as T\nfrom torchvision.datasets import CIFAR10, MNIST\n\n# Utils\nimport visdom\n\n# Custom\nimport backbone.densenet as densenet\nfrom config import *\nfrom data.datasets import UnsupData\nfrom utils import *\n\n\n##\n# Data\ntrain_transform = T.Compose([\n    T.RandomHorizontalFlip(),\n    T.RandomCrop(size=32, padding=4),\n    T.ToTensor(),\n    T.Normalize([0.4914, 0.4822, 0.4465], [0.2023, 0.1994, 0.2010]) # T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)) # CIFAR-100\n])\n\ntest_transform = T.Compose([\n    T.ToTensor(),\n    T.Normalize([0.4914, 0.4822, 0.4465], [0.2023, 0.1994, 0.2010]) # T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)) # CIFAR-100\n])\n\ncifar10_train = CIFAR10('../cifar10', train=True, \n                        download=False, transform=train_transform)\ncifar10_val   = CIFAR10('../cifar10', train=False, \n                        download=False, transform=test_transform)\ncifar10_test  = CIFAR10('../cifar10', train=False, \n                        download=False, transform=test_transform)\n    \n#unsup_train = UnsupData(ood='../Imagenet_resize/Imagenet_resize', \n#                        id='../cifar10', train=True, \n#                        transform=train_transform)\n#unsup_val = UnsupData(ood='../Imagenet_resize/Imagenet_resize', \n#                      id='../cifar10', train=False, \n#                      transform=test_transform)\n# MNIST('../mnist', train=False, download=True) # Download MNIST test data\nunsup_train = UnsupData(ood='../mnist', id='../cifar10', train=True, transform=train_transform)\nunsup_val = UnsupData(ood='../mnist', id='../cifar10', train=False, transform=test_transform)\n\n##\n# Main\nif __name__ == '__main__':\n    # Visdom visualizer\n    vis = visdom.Visdom(server='http://localhost')\n    plot_data = {'X': [], 'Y': [], 'legend': ['Loss']}\n\n    # Dataloaders\n    indices = list(range(10000))\n    random.Random(4).shuffle(indices)\n    train_loader = DataLoader(cifar10_train, batch_size=BATCH,\n                              shuffle=True, pin_memory=True, \n                              drop_last=True, num_workers=2)\n    val_loader = DataLoader(cifar10_val, batch_size=BATCH,\n                            sampler=SubsetRandomSampler(indices[:NUM_VAL]),\n                            pin_memory=True, num_workers=2)\n    test_loader = DataLoader(cifar10_test, batch_size=BATCH,\n                             shuffle=SubsetRandomSampler(indices[NUM_VAL:]), \n                             pin_memory=True, num_workers=2)\n    unsup_train_loader = DataLoader(unsup_train, batch_size=BATCH,\n                                    shuffle=True, pin_memory=True, \n                                    drop_last=True, num_workers=2)\n    unsup_val_loader = DataLoader(unsup_val, batch_size=BATCH,\n                                  shuffle=False, pin_memory=True, \n                                  num_workers=2)\n    dataloaders  = {'sup_train': train_loader, \n                    'sup_val': val_loader, \n                    'sup_test': test_loader, \n                    'unsup_train': list(unsup_train_loader), \n                    'unsup_val': unsup_val_loader}\n\n    # Model\n    two_head_net = densenet.densenet_cifar().cuda()\n    torch.backends.cudnn.benchmark = True\n\n    # Losses\n    sup_criterion = nn.CrossEntropyLoss()\n    unsup_criterion = DiscrepancyLoss\n    criterions = {'sup': sup_criterion, 'unsup': unsup_criterion}\n\n    \"\"\" Data visualization\n    \"\"\"\n    inputs, classes = next(iter(dataloaders['unsup_train']))\n    out = make_grid(inputs)\n    imshow(out, title='')\n\n    \"\"\" Pre-training\n    optimizer = optim.SGD(two_head_net.parameters(), lr=LR, \n                          momentum=MOMENTUM, weight_decay=WDECAY)\n    scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=MILESTONES)\n\n    train(two_head_net, criterions, optimizer, \n          scheduler, dataloaders, EPOCH, vis, plot_data)\n          \n    acc_1, acc_2 = test(two_head_net, dataloaders, mode='sup_test')\n    print('Test acc {}, {}'.format(acc_1, acc_2)) # > 92.5\n\n    test3(two_head_net, dataloaders, mode='unsup_train')\n\n    # Save a checkpoint\n    torch.save({\n        'epoch': EPOCH,\n        'accuracy': (acc_1 + acc_2) / 2,\n        'state_dict': two_head_net.state_dict()\n    },\n    './ckp_weights/pre-train/weights/two_head_cifar10.pth')\n    \"\"\"\n\n    \"\"\" Fine-tuning\n    \"\"\"\n    checkpoint = torch.load('./ckp_weights/pre-train/weights/two_head_cifar10.pth')\n    two_head_net.load_state_dict(checkpoint['state_dict'])\n \n    optimizer = optim.SGD(two_head_net.parameters(), \n                          lr=0.001,\n                          momentum=MOMENTUM, weight_decay=WDECAY)\n    # the scheduler is not necessary in the fine-tuning step, but it is made just in case.\n    scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=MILESTONES) \n    \n    fine_tune(two_head_net, criterions, optimizer, \n              scheduler, dataloaders, num_epochs=10, vis=vis)\n\n    \"\"\" Discrepancy distribution of ID and OOD\n    \"\"\"\n    checkpoint = torch.load('./ckp_weights/fine-tune/weights/unsup_ckp.pth')\n    two_head_net.load_state_dict(checkpoint['state_dict'])\n\n    test2(two_head_net, dataloaders, mode='unsup_train')", "features": {"programming language": ["Python"], "workflow": ["data loading", "data augmentation", "data normalization", "model initialization", "loss function definition", "optimizer and scheduler definition", "data visualization", "model training", "model evaluation", "model saving and loading", "fine-tuning", "discrepancy distribution analysis"], "implementation style": ["procedural"], "functionality": ["image data processing", "neural network training", "neural network evaluation", "out-of-distribution detection"], "resource usage": ["GPU memory", "CPU memory", "disk storage"], "computation operation": {"mathematical operation": ["random shuffling", "normalization", "cross-entropy calculation"], "algorithmic operation": ["stochastic gradient descent", "learning rate scheduling", "data sampling"], "statistical operation": []}, "security": [], "user interaction": {"display": ["data visualization"]}, "data processing": {"data preparation": ["data augmentation", "data normalization"], "data retrieval": ["loading data from disk"], "data transformation": ["random horizontal flip", "random crop", "tensor conversion", "normalization"], "data validation": []}, "file operation": ["model checkpoint saving", "model checkpoint loading"], "error handling": ["warnings suppression"], "logging": [], "dependency relations": ["torch", "torchvision", "visdom", "backbone.densenet", "config", "data.datasets", "utils"], "algorithm": ["Maximum Classifier Discrepancy"], "data structures": ["list", "dict"], "implementation logic": ["iterative"], "advanced techniques": ["deep learning", "data augmentation", "out-of-distribution detection"], "issues & bugs": ["hardcoded file paths", "potential issue with random seed setting affecting reproducibility", "ignoring warnings might hide important messages"], "potential scenario": "The code is part of a system for detecting out-of-distribution samples in image datasets using a neural network, which can be used to improve the robustness of machine learning models in real-world applications such as autonomous driving or medical image analysis.", "summary": "This Python code implements an out-of-distribution detection procedure using PyTorch. It includes steps for data preparation, neural network instantiation, training, evaluation, fine-tuning, and discrepancy analysis between in-distribution and out-of-distribution data.", "purpose": "To detect out-of-distribution samples in image datasets using a deep learning approach for improving the safety and reliability of AI systems."}}
{"idx": 0, "original_code": "''' Unsupervised Out-of-distribution Detection Procedure in Pytorch.\n\nReference:\n[Yu et al. ICCV 2019] Unsupervised Out-of-Distribution Detection by Maximum Classifier Discrepancy (https://arxiv.org/abs/1908.04951)\n'''\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Python\nimport random\n\n# Torch\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nimport torch.optim.lr_scheduler as lr_scheduler\nfrom torch.utils.data.sampler import SubsetRandomSampler\n\n# Torchvison\nfrom torchvision.utils import make_grid\nimport torchvision.transforms as T\nfrom torchvision.datasets import CIFAR10, MNIST\n\n# Utils\nimport visdom\n\n# Custom\nimport backbone.densenet as densenet\nfrom config import *\nfrom data.datasets import UnsupData\nfrom utils import *\n\n\n##\n# Data\ntrain_transform = T.Compose([\n    T.RandomHorizontalFlip(),\n    T.RandomCrop(size=32, padding=4),\n    T.ToTensor(),\n    T.Normalize([0.4914, 0.4822, 0.4465], [0.2023, 0.1994, 0.2010]) # T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)) # CIFAR-100\n])\n\ntest_transform = T.Compose([\n    T.ToTensor(),\n    T.Normalize([0.4914, 0.4822, 0.4465], [0.2023, 0.1994, 0.2010]) # T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)) # CIFAR-100\n])\n\ncifar10_train = CIFAR10('../cifar10', train=True, \n                        download=False, transform=train_transform)\ncifar10_val   = CIFAR10('../cifar10', train=False, \n                        download=False, transform=test_transform)\ncifar10_test  = CIFAR10('../cifar10', train=False, \n                        download=False, transform=test_transform)\n    \n#unsup_train = UnsupData(ood='../Imagenet_resize/Imagenet_resize', \n#                        id='../cifar10', train=True, \n#                        transform=train_transform)\n#unsup_val = UnsupData(ood='../Imagenet_resize/Imagenet_resize', \n#                      id='../cifar10', train=False, \n#                      transform=test_transform)\n# MNIST('../mnist', train=False, download=True) # Download MNIST test data\nunsup_train = UnsupData(ood='../mnist', id='../cifar10', train=True, transform=train_transform)\nunsup_val = UnsupData(ood='../mnist', id='../cifar10', train=False, transform=test_transform)\n\n##\n# Main\nif __name__ == '__main__':\n    # Visdom visualizer\n    vis = visdom.Visdom(server='http://localhost')\n    plot_data = {'X': [], 'Y': [], 'legend': ['Loss']}\n\n    # Dataloaders\n    indices = list(range(10000))\n    random.Random(4).shuffle(indices)\n    train_loader = DataLoader(cifar10_train, batch_size=BATCH,\n                              shuffle=True, pin_memory=True, \n                              drop_last=True, num_workers=2)\n    val_loader = DataLoader(cifar10_val, batch_size=BATCH,\n                            sampler=SubsetRandomSampler(indices[:NUM_VAL]),\n                            pin_memory=True, num_workers=2)\n    test_loader = DataLoader(cifar10_test, batch_size=BATCH,\n                             shuffle=SubsetRandomSampler(indices[NUM_VAL:]), \n                             pin_memory=True, num_workers=2)\n    unsup_train_loader = DataLoader(unsup_train, batch_size=BATCH,\n                                    shuffle=True, pin_memory=True, \n                                    drop_last=True, num_workers=2)\n    unsup_val_loader = DataLoader(unsup_val, batch_size=BATCH,\n                                  shuffle=False, pin_memory=True, \n                                  num_workers=2)\n    dataloaders  = {'sup_train': train_loader, \n                    'sup_val': val_loader, \n                    'sup_test': test_loader, \n                    'unsup_train': list(unsup_train_loader), \n                    'unsup_val': unsup_val_loader}\n\n    # Model\n    two_head_net = densenet.densenet_cifar().cuda()\n    torch.backends.cudnn.benchmark = True\n\n    # Losses\n    sup_criterion = nn.CrossEntropyLoss()\n    unsup_criterion = DiscrepancyLoss\n    criterions = {'sup': sup_criterion, 'unsup': unsup_criterion}\n\n    \"\"\" Data visualization\n    \"\"\"\n    inputs, classes = next(iter(dataloaders['unsup_train']))\n    out = make_grid(inputs)\n    imshow(out, title='')\n\n    \"\"\" Pre-training\n    optimizer = optim.SGD(two_head_net.parameters(), lr=LR, \n                          momentum=MOMENTUM, weight_decay=WDECAY)\n    scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=MILESTONES)\n\n    train(two_head_net, criterions, optimizer, \n          scheduler, dataloaders, EPOCH, vis, plot_data)\n          \n    acc_1, acc_2 = test(two_head_net, dataloaders, mode='sup_test')\n    print('Test acc {}, {}'.format(acc_1, acc_2)) # > 92.5\n\n    test3(two_head_net, dataloaders, mode='unsup_train')\n\n    # Save a checkpoint\n    torch.save({\n        'epoch': EPOCH,\n        'accuracy': (acc_1 + acc_2) / 2,\n        'state_dict': two_head_net.state_dict()\n    },\n    './ckp_weights/pre-train/weights/two_head_cifar10.pth')\n    \"\"\"\n\n    \"\"\" Fine-tuning\n    \"\"\"\n    checkpoint = torch.load('./ckp_weights/pre-train/weights/two_head_cifar10.pth')\n    two_head_net.load_state_dict(checkpoint['state_dict'])\n \n    optimizer = optim.SGD(two_head_net.parameters(), \n                          lr=0.001,\n                          momentum=MOMENTUM, weight_decay=WDECAY)\n    # the scheduler is not necessary in the fine-tuning step, but it is made just in case.\n    scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=MILESTONES) \n    \n    fine_tune(two_head_net, criterions, optimizer, \n              scheduler, dataloaders, num_epochs=10, vis=vis)\n\n    \"\"\" Discrepancy distribution of ID and OOD\n    \"\"\"\n    checkpoint = torch.load('./ckp_weights/fine-tune/weights/unsup_ckp.pth')\n    two_head_net.load_state_dict(checkpoint['state_dict'])\n\n    test2(two_head_net, dataloaders, mode='unsup_train')", "features": {"programming language": ["Python"], "workflow": ["suppress warnings", "data augmentation and normalization", "data loading", "model initialization", "visualization setup", "dataloaders setup", "loss criteria setup", "data visualization", "model training", "model testing", "model evaluation", "model saving", "model loading", "fine-tuning", "discrepancy distribution analysis"], "implementation style": ["procedural", "object-oriented"], "functionality": ["out-of-distribution detection", "data visualization", "model training", "model evaluation"], "resource usage": ["GPU"], "computation operation": {"mathematical operation": ["normalization"], "algorithmic operation": ["shuffling data", "batch processing", "training optimization"], "statistical operation": []}, "security": [], "user interaction": {"Display": ["visualizing data through visdom"]}, "data processing": {"data preparation": ["data augmentation", "data normalization"], "data retrieval": ["data loading from CIFAR10 and MNIST datasets"], "data transformation": ["tensor conversion", "image flipping", "image cropping", "image normalization"], "data validation": []}, "file operation": ["model state loading", "model state saving"], "error handling": [], "logging": [], "dependency relations": ["torch", "torchvision", "visdom", "backbone.densenet", "config", "data.datasets.UnsupData", "utils"], "algorithm": ["Maximum Classifier Discrepancy"], "data structures": ["list", "dict"], "implementation logic": ["iterative"], "advanced techniques": ["deep learning", "unsupervised learning"], "issues & bugs": ["ignoring all warnings might hide important messages", "hard-coded file paths can lead to errors if paths change or are incorrect"], "potential scenario": "The code is used for detecting out-of-distribution samples in image datasets, which is valuable for improving the robustness of machine learning models against novel or anomalous inputs that the model was not trained on.", "summary": "The code performs unsupervised out-of-distribution detection using a deep learning approach, specifically through the Maximum Classifier Discrepancy method with PyTorch. It includes data preparation, visualization, model training, and evaluation steps.", "purpose": "To detect out-of-distribution images in datasets using a deep learning approach and improve model robustness against unseen data."}}
{"idx": 1, "original_code": "\n# Custom Model-From in django-admin demo \nQ:\nclass Person(Model):\n  first_name = CharField(...)\n  last_name = CharField(...)\n  def name():\n    return first_name + ' ' + last_name\n'''\n    Displaying the name as a single column in the admin change list is easy enough. However, \n    I need a single, editable \"name\" field that is editable from the list page, \n    which I can then parse to extract and set the model field values. The parsing isn't a concern. \n    I am just wondering how to have an editable form field on the list page \n    that doesn't correspond directly to a model field.\n'''\n\nA:\nclass PersonChangeListForm(forms.ModelForm):\n    class Meta:\n        model = Person\n    name = forms.CharField()\n\n    def __init__(self, *args, **kwargs):\n        instance = kwargs.get('instance')\n        if instance:\n            initial = kwargs.get('initial', {})\n            initial['name'] = '%s %s' % (instance.first_name, instance.last_name)\n            kwargs['initial'] = initial\n        super(PersonChangeListForm, self).__init__(*args, **kwargs)\n\n    def save(self, *args, **kwargs):\n        # use whatever parsing you like here\n        first_name, last_name = self.cleaned_data['name'].split(None, 1)\n        self.cleaned_data['first_name'] = first_name\n        self.cleaned_data['last_name'] = last_name\n        super(PersonChangeListForm, self).save(*args, **kwargs)\n\nclass PersonAdmin(admin.ModelAdmin):\n    def get_changelist_form(self, request, **kwargs):\n        return PersonChangeListForm\n\n\n\n\n\n'''\n# compilemessages\n\ndjango-admin compilemessages\nCompiles .po files created by makemessages to .mo files for use with the built-in gettext support. \n\n---------------------------------------------------------------------------------------------------\n\n# makemessages\n\ndjango-admin makemessages\nRuns over the entire source tree of the current directory and pulls out all strings \nmarked for translation. It creates (or updates) a message file in the conf/locale (in the Django tree) \nor locale (for project and application) directory. After making changes to the messages files \nyou need to compile them with compilemessages for use with the builtin gettext support. \nSee the i18n documentation for details.\n'''\n\n\n\n\n", "features": {"programming language": ["Python"], "workflow": ["form initialization", "request handling", "form field value setting", "data validation", "form submission", "form data parsing", "data saving"], "implementation style": ["object-oriented"], "functionality": ["web form processing", "data manipulation", "admin interface customization"], "resource usage": [], "computation operation": [], "security": [], "user interaction": [{"UserInput": ["form submission"], "UIComponents": ["editable form field"], "Display": []}], "data processing": {"Data Preparation": [], "Data Retrieval": ["retrieve initial form values from model instance"], "Data Transformation": ["combine first and last name into a single field", "split name field into first and last names"], "Data Validation": ["cleaned_data validation"]}, "file operation": [], "error handling": [], "logging": [], "dependency relations": ["Django"], "algorithm": [], "data structures": ["class", "dictionary"], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["handling names with more than one space correctly", "handling empty name field"], "potential scenario": "Customizing the Django admin interface to allow editing a concatenated full name directly from the list display.", "summary": "This code customizes the Django admin interface to present a single editable field representing a person's full name on the list page, which is then parsed into first and last names before saving.", "purpose": "To provide an editable 'name' field in the Django admin list view that is not directly associated with a model field."}}
{"idx": 1, "original_code": "\n# Custom Model-From in django-admin demo \nQ:\nclass Person(Model):\n  first_name = CharField(...)\n  last_name = CharField(...)\n  def name():\n    return first_name + ' ' + last_name\n'''\n    Displaying the name as a single column in the admin change list is easy enough. However, \n    I need a single, editable \"name\" field that is editable from the list page, \n    which I can then parse to extract and set the model field values. The parsing isn't a concern. \n    I am just wondering how to have an editable form field on the list page \n    that doesn't correspond directly to a model field.\n'''\n\nA:\nclass PersonChangeListForm(forms.ModelForm):\n    class Meta:\n        model = Person\n    name = forms.CharField()\n\n    def __init__(self, *args, **kwargs):\n        instance = kwargs.get('instance')\n        if instance:\n            initial = kwargs.get('initial', {})\n            initial['name'] = '%s %s' % (instance.first_name, instance.last_name)\n            kwargs['initial'] = initial\n        super(PersonChangeListForm, self).__init__(*args, **kwargs)\n\n    def save(self, *args, **kwargs):\n        # use whatever parsing you like here\n        first_name, last_name = self.cleaned_data['name'].split(None, 1)\n        self.cleaned_data['first_name'] = first_name\n        self.cleaned_data['last_name'] = last_name\n        super(PersonChangeListForm, self).save(*args, **kwargs)\n\nclass PersonAdmin(admin.ModelAdmin):\n    def get_changelist_form(self, request, **kwargs):\n        return PersonChangeListForm\n\n\n\n\n\n'''\n# compilemessages\n\ndjango-admin compilemessages\nCompiles .po files created by makemessages to .mo files for use with the built-in gettext support. \n\n---------------------------------------------------------------------------------------------------\n\n# makemessages\n\ndjango-admin makemessages\nRuns over the entire source tree of the current directory and pulls out all strings \nmarked for translation. It creates (or updates) a message file in the conf/locale (in the Django tree) \nor locale (for project and application) directory. After making changes to the messages files \nyou need to compile them with compilemessages for use with the builtin gettext support. \nSee the i18n documentation for details.\n'''\n\n\n\n\n", "features": {"programming language": ["Python"], "workflow": ["custom form definition", "form initialization", "form field population", "form save override", "admin model customization"], "implementation style": ["object-oriented"], "functionality": ["admin interface enhancement", "form processing", "data manipulation"], "resource usage": [], "data processing": {"data preparation": [], "data retrieval": ["extracting initial values from model instance"], "data transformation": ["concatenating first name and last name"], "data validation": ["cleaned_data retrieval"], "other": []}, "computation operation": {"mathematical operation": [], "algorithmic operation": ["string splitting"], "statistical operation": []}, "security": [], "user interaction": {"user input": [], "ui components": ["editable form field in Django admin"], "display": []}, "file operation": [], "error handling": [], "logging": [], "dependency relations": ["Django"], "algorithm": [], "data structures": ["dict", "class"], "implementation logic": ["procedural within methods"], "advanced techniques": [], "issues & bugs": ["potential issue with name splitting if name contains more than two parts"], "potential scenario": "Customizing the Django admin to allow editing a computed field that represents a person's full name, parsed into first and last name upon form submission.", "summary": "Enhances the Django admin interface by providing a custom form for the Person model that allows editing a full name, which is then split into first and last names when the form is saved.", "purpose": "To provide a user-friendly method of editing a person's full name directly from the Django admin list page and updating the underlying model fields accordingly."}}
{"idx": 2, "original_code": "system.exec_command(\"killall java\", False)", "features": {"programming language": ["Python"], "workflow": ["command execution"], "implementation style": ["procedural"], "functionality": ["process management"], "resource usage": ["CPU Cycles"], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": ["unknown (system)"], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["no error handling for command execution failure"], "potential scenario": "The code is used in a script to forcefully close all running Java applications on a system.", "summary": "Executes a system command to terminate all Java processes without error handling.", "purpose": "To terminate all Java processes running on a system."}}
{"idx": 2, "original_code": "system.exec_command(\"killall java\", False)", "features": {"programming language": ["Python"], "workflow": ["executing system command"], "implementation style": ["procedural"], "functionality": ["process management"], "resource usage": ["CPU Cycles"], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": ["your answer"], "algorithm": [], "data structures": [], "implementation logic": ["sequential"], "advanced techniques": [], "issues & bugs": ["hardcoded command may not be portable across different operating systems or configurations", "lack of error handling"], "potential scenario": "Forcefully stopping all Java applications running on the system", "summary": "The code snippet is used to terminate all running Java processes on the system.", "purpose": "To stop all Java processes immediately without asking for confirmation."}}
{"idx": 2, "original_code": "system.exec_command(\"killall java\", False)", "features": {"programming language": ["Python"], "workflow": ["executing system command"], "implementation style": ["procedural"], "functionality": ["process management"], "resource usage": ["CPU Cycles"], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": ["AutoKey or similar tool with system.exec_command function"], "algorithm": [], "data structures": [], "implementation logic": ["imperative"], "advanced techniques": [], "issues & bugs": ["hardcoded command string", "assumes 'java' is the process name"], "potential scenario": "The code is used to terminate all running instances of Java applications, possibly as part of a cleanup script in a development environment.", "summary": "Executes a system command to terminate all Java processes.", "purpose": "To terminate all running Java processes on the system."}}
{"idx": 3, "original_code": "\nShould compose two functions together\n| (def inc (x) (+ x 1))\n> ((pipe inc inc) -1)\n= 1\n\nShould compose several functions together\n| (def inc (x) (+ x 1))\n| (def half (x) (/ x 2))\n> ((pipe inc inc inc half) 1)\n= 2\n\nShould compose closures together\n> ((pipe (fn (x) (+ x 1)) (fn (x) (* x 3))) 0)\n= 3\n\nShould compose nested closures\n> ((pipe (fn (x) ((pipe (fn (x) x) (fn (x) x)) x)) (fn (x) (* x 4))) 1)\n= 4\n\nShould compose two partially applied functions together\n| (def add (x y) (+ x y))\n> ((pipe (add 2) (add 4)) -1)\n= 5\n\nShould isolate lambdas syntacticly\n| (typ (maybe a) (Some a) None)\n| (def f (x) ((pipe (fn (x) (match x (Some y) y None 0)) (fn (x) (Some x))) x))\n> (match (f (Some 6)) (Some x) x None -1)\n= 6\n\nShould not shadow symbols\n| (def x (a b) (+ a b))\n> ((pipe (x 2) (x 4)) -1)\n= 5\n", "features": {"programming language": ["Lisp"], "workflow": ["function definition", "function composition", "lambda abstraction", "pattern matching", "partial function application"], "implementation style": ["functional"], "functionality": ["function composition", "pattern matching"], "resource usage": [], "data processing": {"data preparation": [], "data retrieval": [], "data transformation": ["function application"], "data validation": ["pattern matching"]}, "computation operation": {"mathematical operation": ["addition", "division", "multiplication"], "algorithmic operation": ["function composition"], "statistical operation": []}, "security": [], "user interaction": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": ["Function Composition"], "data structures": ["function", "closure"], "implementation logic": ["declarative"], "advanced techniques": [], "issues & bugs": ["potential name shadowing in variable bindings"], "potential scenario": "The code could be used in a functional programming environment where function composition is needed to build more complex operations from simple ones.", "summary": "The code provides examples of defining and composing functions, including lambdas and partially applied functions, using a Lisp-like functional programming style.", "purpose": "To demonstrate the concept of function composition in a Lisp-like language, showing how complex operations can be built from simpler functions."}}
{"idx": 3, "original_code": "\nShould compose two functions together\n| (def inc (x) (+ x 1))\n> ((pipe inc inc) -1)\n= 1\n\nShould compose several functions together\n| (def inc (x) (+ x 1))\n| (def half (x) (/ x 2))\n> ((pipe inc inc inc half) 1)\n= 2\n\nShould compose closures together\n> ((pipe (fn (x) (+ x 1)) (fn (x) (* x 3))) 0)\n= 3\n\nShould compose nested closures\n> ((pipe (fn (x) ((pipe (fn (x) x) (fn (x) x)) x)) (fn (x) (* x 4))) 1)\n= 4\n\nShould compose two partially applied functions together\n| (def add (x y) (+ x y))\n> ((pipe (add 2) (add 4)) -1)\n= 5\n\nShould isolate lambdas syntacticly\n| (typ (maybe a) (Some a) None)\n| (def f (x) ((pipe (fn (x) (match x (Some y) y None 0)) (fn (x) (Some x))) x))\n> (match (f (Some 6)) (Some x) x None -1)\n= 6\n\nShould not shadow symbols\n| (def x (a b) (+ a b))\n> ((pipe (x 2) (x 4)) -1)\n= 5\n", "features": {"programming language": ["Lisp"], "workflow": ["function definition", "function composition", "function application", "pattern matching"], "implementation style": ["functional"], "functionality": ["functional composition"], "resource usage": [], "computation operation": {"mathematical operation": ["addition", "division", "multiplication"], "algorithmic operation": ["function composition", "pattern matching"]}, "security": [], "user interaction": [], "data processing": {"data transformation": ["partial function application"], "data validation": ["pattern matching"]}, "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": ["function composition"], "data structures": ["functions", "closures"], "implementation logic": ["higher-order functions"], "advanced techniques": ["closures", "partial application"], "issues & bugs": ["no explicit error handling", "potential for unhandled cases in pattern matching"], "potential scenario": "This code could be part of a functional programming library that provides utilities for function composition, which could be used in various areas such as mathematical computation pipelines or functional transformations in data processing applications.", "summary": "The provided code snippets demonstrate the composition of functions and closures in a Lisp-like functional programming language. It includes function definitions, function application, pattern matching, and functional transformations.", "purpose": "To perform operations by composing multiple functions together, potentially transforming data or carrying out computational tasks in a functional programming style."}}
{"idx": 4, "original_code": "a = 1 / 0\n", "features": {"programming language": ["Python"], "workflow": [], "implementation style": ["imperative"], "functionality": ["arithmetic operation"], "resource usage": [], "computation operation": ["division operation"], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": ["unhandled exception"], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": ["sequential"], "advanced techniques": [], "issues & bugs": ["division by zero"], "potential scenario": "This code snippet might be part of a larger function where division by a dynamic denominator is performed, and this is a placeholder or test for that functionality without proper exception handling.", "summary": "Performs a division operation with a hard-coded zero denominator leading to a division by zero error.", "purpose": "To demonstrate a division operation, potentially as an example of how not to handle division by zero."}}
{"idx": 4, "original_code": "a = 1 / 0\n", "features": {"programming language": ["Python"], "workflow": [], "implementation style": ["imperative"], "functionality": ["arithmetic operation"], "resource usage": [], "computation operation": ["mathematical operation"], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": ["ZeroDivisionError"], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["division by zero"], "potential scenario": "Demonstration of an arithmetic error in a simple computation.", "summary": "Attempts to perform a division by zero, which will raise a runtime error.", "purpose": "To trigger an error due to division by zero."}}
{"idx": 4, "original_code": "a = 1 / 0\n", "features": {"programming language": ["Python"], "workflow": [], "implementation style": ["imperative"], "functionality": ["arithmetic operation"], "resource usage": [], "computation operation": ["mathematical operation"], "security": [], "user interaction": [], "data processing": {}, "file operation": [], "error handling": ["division by zero"], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["unhandled exception", "division by zero"], "potential scenario": "Example of an arithmetic operation that will fail due to division by zero.", "summary": "The code attempts to perform a division by zero, which will lead to a runtime error.", "purpose": "To demonstrate a division by zero error."}}
{"idx": 5, "original_code": "\n# HTML Data\n# Intermediate approach before something better\n\nindexHead = '''\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"http://127.0.0.1:9092/favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" media=\"screen\" />\n    <title>{TITLE}</title>\n</head>\n\n<div class=\"responsivefull\">\n    <table style=\"border-color: #aaaaaa; width: 100%; height: 2px;\" border=\"2px\" cellspacing=\"2px\" cellpadding=\"3px\">\n        <tbody>\n            <tr>\n                <td colspan=\"3\" rowspan=\"3\" width=\"45%\">\n                    <div class=\"title\"> Title: {TITLE} </div>\n                    <div class=\"details\"> Company: {COMPANY} </div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Thickness (mm)</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{THICK1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{THICK2}</div>\n                </td>\n            </tr>\n            <td width=\"25%\">\n                <div class=\"versions\">Modules</div>\n            </td>\n            <td width=\"15%\">\n                <div class=\"versions green\">{MODULES1}</div>\n            </td>\n            <td width=\"15%\">\n                <div class=\"versions red\">{MODULES2}</div>\n            </td>\n            <tr>\n                <td width=\"25%\">\n                    <div class=\"versions\">Drawings</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{DRAWINGS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{DRAWINGS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Version</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{diffDir1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{diffDir2}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Nets</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{NETS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{NETS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Date</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D1DATE}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D2DATE}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Tracks</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{TRACKS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{TRACKS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Time</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D1TIME}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D2TIME}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Zones</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{ZONES1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{ZONES2}</div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'''\n\noutfile = '''\n<div class=\"responsive\">\n    <div class=\"gallery\">\n        <a target=\"_blank\" href=../{diff1}/{layername}>\n            <a href=./triptych/{prj}-{layer}.html>\n                <img class=\"{layer}\" src=../{diff1}/{layername} height=\"200\">\n            </a>\n        </a>\n        <div class=\"desc\">{layer}</div>\n    </div>\n</div>\n'''\n\ntriptychHTML = '''\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../style.css\" media=\"screen\" />\n    <style>\n        div.responsive {{\n            padding: 0 6px;\n            float: left;\n            width: 49.99%;\n    }}\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js\"></script>\n</head>\n<body>\n\n    <div id=\"compo-container\" style=\"width: 100%; height: 600px; position: relative;\">\n        <div style=\"position: absolute; width: 100%; height: inherit;\">\n            <svg id=\"svg-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: inherit; min-width: inherit; max-width: inherit; height: inherit; min-height: inherit; max-height: inherit;\" version=\"1.1\">\n                <g>\n                    <svg id=\"compo\">\n                        <defs>\n                            <filter id=\"f1\">\n                                <feColorMatrix id=\"c1\" type=\"matrix\"\n                                    values=\"1   0   0   0   0\n                                            0   1   0   1   0\n                                            0   0   1   1   0\n                                            0   0   0   1   0 \" />\n                            </filter>\n                        </defs>\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" filter=\"url(#f1)\" xlink:href=\"../../{diff1}/{layername}\" />\n                    </svg>\n                    <svg id=\"compo2\">\n                        <defs>\n                            <filter id=\"f2\">\n                                <feColorMatrix id=\"c2\" type=\"matrix\"\n                                    values=\"1   0   0   1   0\n                                            0   1   0   0   0\n                                            0   0   1   0   0\n                                            0   0   0   .5   0\" />\n                            </filter>\n                        </defs>\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" filter=\"url(#f2)\" xlink:href=\"../../{diff2}/{layername}\" />\n                    </svg>\n                </g>\n            </svg>\n        </div>\n        <div style=\"background: rgba(255, 0, 0, 0.0); z-index: 10; position: absolute;\" class=\"title\">{prj}</div>\n        <div style=\"background: rgba(255, 0, 0, 0.0); z-index: 10; position: absolute;\" class=\"subtitle\">{layer}</div>\n    </div>\n\n    <div id=\"sbs-container\" style=\"position:relative; width: 100%; border:1px solid #555; background-color: #222; text-align: center; display: flex;\">\n\n        <div id=\"image1-container\" style=\"border: 1px solid #555; width: 50%; height: 250px\">\n            <div style=\"width: 100%; height: 250px\">\n                <svg id=\"svg-img2-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: 100%; min-width: 100%; max-width: 100%; height: 100%; min-height: 100%; max-height: 100%;\" version=\"1.1\">\n                    <svg id=\"image_1\">\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" xlink:href=\"../../{diff1}/{layername}\" class=\"{layer}\"/>\n                    </svg>\n                </svg>\n            </div>\n        </div>\n\n        <div id=\"image2-container\" style=\"border: 1px solid #555; width: 50%; height: 250px\">\n            <div style=\"width: 100%; height: 250px\">\n                <svg id=\"svg-img2-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: 100%; min-width: 100%; max-width: 100%; height: 100%; min-height: 100%; max-height: 100%;\" version=\"1.1\">\n                    <svg id=\"image_2\">\n                       <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" xlink:href=\"../../{diff2}/{layername}\" class=\"{layer}\"/>\n                    </svg>\n                </svg>\n            </div>\n        </div>\n\n    </div>\n'''\n\ntwopane='''\n<script>\n    window.onload = function() {\n\n        var panZoomDiff = svgPanZoom(\n            '#svg-id', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                center: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        var zoomDiff1 = svgPanZoom(\n            '#image_1', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                center: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        var zoomDiff2 = svgPanZoom(\n            '#image_2', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        zoomDiff1.setOnZoom(\n            function(level) {\n                zoomDiff2.zoom(level);\n                zoomDiff2.pan(zoomDiff1.getPan());\n            }\n        );\n\n        zoomDiff1.setOnPan(\n            function(point) {\n                zoomDiff2.pan(point);\n            }\n        );\n\n        zoomDiff2.setOnZoom(\n            function(level) {\n                zoomDiff1.zoom(level);\n                zoomDiff1.pan(zoomDiff2.getPan());\n            }\n        );\n\n        zoomDiff2.setOnPan(\n            function(point) {\n                zoomDiff1.pan(point);\n            }\n        );\n\n\n    };\n</script>\n\n</body>\n</html>\n'''\n\ntail = '''\n<div class=\"clearfix\"></div>\n<div style=\"padding:6px;\"></div>\n'''\n", "features": {"programming language": ["HTML", "JavaScript"], "workflow": ["HTML template creation", "dynamic content embedding", "image gallery setup", "SVG manipulation", "zoom and pan functionality"], "implementation style": ["declarative", "event-driven"], "functionality": ["web content generation", "interactive graphics"], "resource usage": ["browser memory", "network bandwidth for image and script loading"], "computation operation": {"Mathematical Operation": [], "Algorithmic Operation": [], "Statistical Operation": []}, "security": [], "user interaction": {"UserInput": [], "UIComponents": ["image gallery", "zoom controls", "pan controls"], "Display": ["HTML structure display", "SVG graphics"]}, "data processing": {"Data Preparation": [], "Data Retrieval": [], "Data Transformation": ["text replacement for dynamic content"], "Data Validation": []}, "file operation": ["image linking"], "error handling": [], "logging": [], "dependency relations": ["svg-pan-zoom"], "algorithm": [], "data structures": ["strings for HTML content"], "implementation logic": ["sequential"], "advanced techniques": [], "issues & bugs": ["hardcoded URLs may not work if the server address changes", "potential missing error handling for image loading"], "potential scenario": "This code is likely used to create an interactive web page for comparing different versions of design files, possibly in a CAD or graphics design context.", "summary": "The code creates an interactive HTML page that displays images and SVGs, allowing users to compare different design versions with zoom and pan functionality.", "purpose": "To generate an HTML document for displaying and interacting with design versions and their details."}}
{"idx": 5, "original_code": "\n# HTML Data\n# Intermediate approach before something better\n\nindexHead = '''\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"http://127.0.0.1:9092/favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" media=\"screen\" />\n    <title>{TITLE}</title>\n</head>\n\n<div class=\"responsivefull\">\n    <table style=\"border-color: #aaaaaa; width: 100%; height: 2px;\" border=\"2px\" cellspacing=\"2px\" cellpadding=\"3px\">\n        <tbody>\n            <tr>\n                <td colspan=\"3\" rowspan=\"3\" width=\"45%\">\n                    <div class=\"title\"> Title: {TITLE} </div>\n                    <div class=\"details\"> Company: {COMPANY} </div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Thickness (mm)</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{THICK1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{THICK2}</div>\n                </td>\n            </tr>\n            <td width=\"25%\">\n                <div class=\"versions\">Modules</div>\n            </td>\n            <td width=\"15%\">\n                <div class=\"versions green\">{MODULES1}</div>\n            </td>\n            <td width=\"15%\">\n                <div class=\"versions red\">{MODULES2}</div>\n            </td>\n            <tr>\n                <td width=\"25%\">\n                    <div class=\"versions\">Drawings</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{DRAWINGS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{DRAWINGS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Version</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{diffDir1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{diffDir2}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Nets</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{NETS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{NETS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Date</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D1DATE}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D2DATE}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Tracks</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{TRACKS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{TRACKS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Time</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D1TIME}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D2TIME}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Zones</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{ZONES1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{ZONES2}</div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'''\n\noutfile = '''\n<div class=\"responsive\">\n    <div class=\"gallery\">\n        <a target=\"_blank\" href=../{diff1}/{layername}>\n            <a href=./triptych/{prj}-{layer}.html>\n                <img class=\"{layer}\" src=../{diff1}/{layername} height=\"200\">\n            </a>\n        </a>\n        <div class=\"desc\">{layer}</div>\n    </div>\n</div>\n'''\n\ntriptychHTML = '''\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../style.css\" media=\"screen\" />\n    <style>\n        div.responsive {{\n            padding: 0 6px;\n            float: left;\n            width: 49.99%;\n    }}\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js\"></script>\n</head>\n<body>\n\n    <div id=\"compo-container\" style=\"width: 100%; height: 600px; position: relative;\">\n        <div style=\"position: absolute; width: 100%; height: inherit;\">\n            <svg id=\"svg-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: inherit; min-width: inherit; max-width: inherit; height: inherit; min-height: inherit; max-height: inherit;\" version=\"1.1\">\n                <g>\n                    <svg id=\"compo\">\n                        <defs>\n                            <filter id=\"f1\">\n                                <feColorMatrix id=\"c1\" type=\"matrix\"\n                                    values=\"1   0   0   0   0\n                                            0   1   0   1   0\n                                            0   0   1   1   0\n                                            0   0   0   1   0 \" />\n                            </filter>\n                        </defs>\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" filter=\"url(#f1)\" xlink:href=\"../../{diff1}/{layername}\" />\n                    </svg>\n                    <svg id=\"compo2\">\n                        <defs>\n                            <filter id=\"f2\">\n                                <feColorMatrix id=\"c2\" type=\"matrix\"\n                                    values=\"1   0   0   1   0\n                                            0   1   0   0   0\n                                            0   0   1   0   0\n                                            0   0   0   .5   0\" />\n                            </filter>\n                        </defs>\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" filter=\"url(#f2)\" xlink:href=\"../../{diff2}/{layername}\" />\n                    </svg>\n                </g>\n            </svg>\n        </div>\n        <div style=\"background: rgba(255, 0, 0, 0.0); z-index: 10; position: absolute;\" class=\"title\">{prj}</div>\n        <div style=\"background: rgba(255, 0, 0, 0.0); z-index: 10; position: absolute;\" class=\"subtitle\">{layer}</div>\n    </div>\n\n    <div id=\"sbs-container\" style=\"position:relative; width: 100%; border:1px solid #555; background-color: #222; text-align: center; display: flex;\">\n\n        <div id=\"image1-container\" style=\"border: 1px solid #555; width: 50%; height: 250px\">\n            <div style=\"width: 100%; height: 250px\">\n                <svg id=\"svg-img2-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: 100%; min-width: 100%; max-width: 100%; height: 100%; min-height: 100%; max-height: 100%;\" version=\"1.1\">\n                    <svg id=\"image_1\">\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" xlink:href=\"../../{diff1}/{layername}\" class=\"{layer}\"/>\n                    </svg>\n                </svg>\n            </div>\n        </div>\n\n        <div id=\"image2-container\" style=\"border: 1px solid #555; width: 50%; height: 250px\">\n            <div style=\"width: 100%; height: 250px\">\n                <svg id=\"svg-img2-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: 100%; min-width: 100%; max-width: 100%; height: 100%; min-height: 100%; max-height: 100%;\" version=\"1.1\">\n                    <svg id=\"image_2\">\n                       <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" xlink:href=\"../../{diff2}/{layername}\" class=\"{layer}\"/>\n                    </svg>\n                </svg>\n            </div>\n        </div>\n\n    </div>\n'''\n\ntwopane='''\n<script>\n    window.onload = function() {\n\n        var panZoomDiff = svgPanZoom(\n            '#svg-id', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                center: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        var zoomDiff1 = svgPanZoom(\n            '#image_1', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                center: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        var zoomDiff2 = svgPanZoom(\n            '#image_2', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        zoomDiff1.setOnZoom(\n            function(level) {\n                zoomDiff2.zoom(level);\n                zoomDiff2.pan(zoomDiff1.getPan());\n            }\n        );\n\n        zoomDiff1.setOnPan(\n            function(point) {\n                zoomDiff2.pan(point);\n            }\n        );\n\n        zoomDiff2.setOnZoom(\n            function(level) {\n                zoomDiff1.zoom(level);\n                zoomDiff1.pan(zoomDiff2.getPan());\n            }\n        );\n\n        zoomDiff2.setOnPan(\n            function(point) {\n                zoomDiff1.pan(point);\n            }\n        );\n\n\n    };\n</script>\n\n</body>\n</html>\n'''\n\ntail = '''\n<div class=\"clearfix\"></div>\n<div style=\"padding:6px;\"></div>\n'''\n", "features": {"programming language": ["HTML", "JavaScript"], "workflow": ["HTML template creation", "SVG image embedding", "JavaScript event handling"], "implementation style": ["declarative", "event-driven"], "functionality": ["web content generation", "interactive image comparison"], "resource usage": ["browser memory for DOM elements"], "computation operation": [], "security": [], "user interaction": ["image zooming", "image panning", "event handling for synchronized zoom and pan"], "data processing": {"data preparation": [], "data retrieval": [], "data transformation": ["template string formatting"], "data validation": [], "data visualization": ["SVG rendering"]}, "file operation": ["HTML content generation"], "error handling": [], "logging": [], "dependency relations": ["svg-pan-zoom library"], "algorithm": [], "data structures": ["strings"], "implementation logic": ["event-driven logic"], "advanced techniques": [], "issues & bugs": ["hardcoded URLs may not work in different environments", "missing alt attributes for images", "potential XSS vulnerabilities if user-controlled data is not properly sanitized"], "potential scenario": "The code is used to display an interactive web interface where users can compare different versions of SVG images, such as PCB layouts or design schematics, by zooming and panning.", "summary": "The code snippets generate HTML content for displaying and interacting with SVG images, providing an interface for image comparison with features such as zooming and panning that are synchronized across multiple images.", "purpose": "To create a web interface for comparing different versions of images with interactive features."}}
{"idx": 6, "original_code": "../native/*.v3\n", "features": {"programming language": [], "workflow": [], "implementation style": [], "functionality": [], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": ["file pattern matching"], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is likely used to match files with a specific pattern in a directory structure, possibly for batch processing or data analysis.", "summary": "The code snippet appears to be a placeholder or a path used to access files with a '.v3' extension in the 'native' directory.", "purpose": "To specify the path for accessing or processing files with a '.v3' extension."}}
{"idx": 6, "original_code": "../native/*.v3\n", "features": {"programming language": [], "workflow": [], "implementation style": [], "functionality": [], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": ["file path resolution"], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["incomplete code snippet"], "potential scenario": "This code snippet seems to relate to file path resolution or wildcard file matching.", "summary": "The code snippet involves referencing files with a specific pattern within a directory.", "purpose": "To match files with a '.v3' extension in the 'native' subdirectory"}}
{"idx": 7, "original_code": "def test_get_feature(connection):\n    answer = connection.get_xml(\n        \"?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAME=polygons&featureId=polygons.foo\"\n    )\n    features = answer.findall(\".//{http://mapserver.gis.umn.edu/mapserver}polygons\")\n    assert len(features) == 1\n", "features": {"programming language": ["Python"], "workflow": ["retrieve data", "parse XML", "assertion check"], "implementation style": ["procedural"], "functionality": ["XML data retrieval", "data validation"], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": {"data retrieval": ["HTTP GET request"], "data transformation": ["XML parsing"], "data validation": ["length check"]}, "file operation": [], "error handling": ["assertion"], "logging": [], "dependency relations": [], "algorithm": [], "data structures": ["list"], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["hardcoded URL parameters", "hardcoded XML namespace", "hardcoded featureId"], "potential scenario": "Testing the retrieval of a specific 'polygon' feature from a geospatial WFS service.", "summary": "The function tests the retrieval and parsing of a polygon feature from a WFS service using a predefined query.", "purpose": "To verify that the connection to a WFS service can successfully retrieve a specified polygon feature and that the response contains the expected number of elements."}}
{"idx": 7, "original_code": "def test_get_feature(connection):\n    answer = connection.get_xml(\n        \"?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAME=polygons&featureId=polygons.foo\"\n    )\n    features = answer.findall(\".//{http://mapserver.gis.umn.edu/mapserver}polygons\")\n    assert len(features) == 1\n", "features": {"programming language": ["Python"], "workflow": ["sending web service request", "XML response parsing", "assertion of result"], "implementation style": ["procedural"], "functionality": ["web service interaction", "data retrieval"], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": {"data retrieval": ["web service request for XML data"], "data transformation": ["XML parsing"], "data validation": ["assertion check"]}, "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": ["list"], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["hardcoded XML namespace", "hardcoded featureId", "potential for XML parsing errors"], "potential scenario": "Testing a GIS web service for retrieving geographical features in XML format.", "summary": "Sends a web service request to retrieve a specific GIS polygon feature and asserts that exactly one feature is returned in the XML response.", "purpose": "To test the retrieval of a single polygon feature from a GIS web service."}}
{"idx": 8, "original_code": "\"\"\"Store in mind.\"\"\"", "features": {"programming language": [], "workflow": [], "implementation style": [], "functionality": [], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code snippet is a placeholder text, not an actual code, and it suggests to remember or consider something.", "summary": "The provided snippet is not a code but a simple English phrase with no computational context.", "purpose": "The phrase serves as a reminder or note to oneself."}}
{"idx": 8, "original_code": "\"\"\"Store in mind.\"\"\"", "features": {"programming language": [], "workflow": [], "implementation style": [], "functionality": [], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": {}, "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": [], "potential scenario": "", "summary": "", "purpose": ""}}
{"idx": 9, "original_code": "def FastModularExponentiation(b, k, m):\n   for i in range(k):\n      b = (b * b) % m \n  # For only b^2^k style\n   return b\n", "features": {"programming language": ["Python"], "workflow": ["modular exponentiation"], "implementation style": ["procedural"], "functionality": ["mathematical computation"], "resource usage": [], "computation operation": {"mathematical operation": ["modular exponentiation", "squaring"], "algorithmic operation": ["iterative process"]}, "security": [], "user interaction": [], "data processing": {"data preparation": [], "data retrieval": [], "data transformation": [], "data validation": []}, "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": ["Fast Modular Exponentiation"], "data structures": [], "implementation logic": ["iterative"], "advanced techniques": [], "issues & bugs": ["lacks input validation", "potential for large number calculations causing overflow"], "potential scenario": "This function could be used in cryptographic algorithms where fast modular exponentiation is needed for large number operations, such as in RSA encryption or Diffie-Hellman key exchange.", "summary": "The function performs fast modular exponentiation by iteratively squaring the base and taking the modulus.", "purpose": "To efficiently calculate b raised to the power of 2^k modulo m."}}
{"idx": 9, "original_code": "def FastModularExponentiation(b, k, m):\n   for i in range(k):\n      b = (b * b) % m \n  # For only b^2^k style\n   return b\n", "features": {"programming language": ["Python"], "workflow": ["modular exponentiation"], "implementation style": ["procedural"], "functionality": ["mathematical computation"], "resource usage": [], "computation operation": {"mathematical operation": ["modular exponentiation"]}, "security": [], "user interaction": [], "data processing": {"data transformation": [], "data preparation": [], "data retrieval": [], "data validation": []}, "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": ["Fast Modular Exponentiation"], "data structures": [], "implementation logic": ["iterative"], "advanced techniques": [], "issues & bugs": ["no base case for exponentiation (k=0)", "potential integer overflow"], "potential scenario": "Used in cryptographic algorithms where large number modular exponentiation is a common operation.", "summary": "Performs fast modular exponentiation on three integers, iteratively squaring the base and applying the modulus.", "purpose": "To compute b raised to the 2^k-th power modulo m efficiently."}}
