{"idx": 0, "original_code": "''' Unsupervised Out-of-distribution Detection Procedure in Pytorch.\n\nReference:\n[Yu et al. ICCV 2019] Unsupervised Out-of-Distribution Detection by Maximum Classifier Discrepancy (https://arxiv.org/abs/1908.04951)\n'''\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Python\nimport random\n\n# Torch\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nimport torch.optim.lr_scheduler as lr_scheduler\nfrom torch.utils.data.sampler import SubsetRandomSampler\n\n# Torchvison\nfrom torchvision.utils import make_grid\nimport torchvision.transforms as T\nfrom torchvision.datasets import CIFAR10, MNIST\n\n# Utils\nimport visdom\n\n# Custom\nimport backbone.densenet as densenet\nfrom config import *\nfrom data.datasets import UnsupData\nfrom utils import *\n\n\n##\n# Data\ntrain_transform = T.Compose([\n    T.RandomHorizontalFlip(),\n    T.RandomCrop(size=32, padding=4),\n    T.ToTensor(),\n    T.Normalize([0.4914, 0.4822, 0.4465], [0.2023, 0.1994, 0.2010]) # T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)) # CIFAR-100\n])\n\ntest_transform = T.Compose([\n    T.ToTensor(),\n    T.Normalize([0.4914, 0.4822, 0.4465], [0.2023, 0.1994, 0.2010]) # T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)) # CIFAR-100\n])\n\ncifar10_train = CIFAR10('../cifar10', train=True, \n                        download=False, transform=train_transform)\ncifar10_val   = CIFAR10('../cifar10', train=False, \n                        download=False, transform=test_transform)\ncifar10_test  = CIFAR10('../cifar10', train=False, \n                        download=False, transform=test_transform)\n    \n#unsup_train = UnsupData(ood='../Imagenet_resize/Imagenet_resize', \n#                        id='../cifar10', train=True, \n#                        transform=train_transform)\n#unsup_val = UnsupData(ood='../Imagenet_resize/Imagenet_resize', \n#                      id='../cifar10', train=False, \n#                      transform=test_transform)\n# MNIST('../mnist', train=False, download=True) # Download MNIST test data\nunsup_train = UnsupData(ood='../mnist', id='../cifar10', train=True, transform=train_transform)\nunsup_val = UnsupData(ood='../mnist', id='../cifar10', train=False, transform=test_transform)\n\n##\n# Main\nif __name__ == '__main__':\n    # Visdom visualizer\n    vis = visdom.Visdom(server='http://localhost')\n    plot_data = {'X': [], 'Y': [], 'legend': ['Loss']}\n\n    # Dataloaders\n    indices = list(range(10000))\n    random.Random(4).shuffle(indices)\n    train_loader = DataLoader(cifar10_train, batch_size=BATCH,\n                              shuffle=True, pin_memory=True, \n                              drop_last=True, num_workers=2)\n    val_loader = DataLoader(cifar10_val, batch_size=BATCH,\n                            sampler=SubsetRandomSampler(indices[:NUM_VAL]),\n                            pin_memory=True, num_workers=2)\n    test_loader = DataLoader(cifar10_test, batch_size=BATCH,\n                             shuffle=SubsetRandomSampler(indices[NUM_VAL:]), \n                             pin_memory=True, num_workers=2)\n    unsup_train_loader = DataLoader(unsup_train, batch_size=BATCH,\n                                    shuffle=True, pin_memory=True, \n                                    drop_last=True, num_workers=2)\n    unsup_val_loader = DataLoader(unsup_val, batch_size=BATCH,\n                                  shuffle=False, pin_memory=True, \n                                  num_workers=2)\n    dataloaders  = {'sup_train': train_loader, \n                    'sup_val': val_loader, \n                    'sup_test': test_loader, \n                    'unsup_train': list(unsup_train_loader), \n                    'unsup_val': unsup_val_loader}\n\n    # Model\n    two_head_net = densenet.densenet_cifar().cuda()\n    torch.backends.cudnn.benchmark = True\n\n    # Losses\n    sup_criterion = nn.CrossEntropyLoss()\n    unsup_criterion = DiscrepancyLoss\n    criterions = {'sup': sup_criterion, 'unsup': unsup_criterion}\n\n    \"\"\" Data visualization\n    \"\"\"\n    inputs, classes = next(iter(dataloaders['unsup_train']))\n    out = make_grid(inputs)\n    imshow(out, title='')\n\n    \"\"\" Pre-training\n    optimizer = optim.SGD(two_head_net.parameters(), lr=LR, \n                          momentum=MOMENTUM, weight_decay=WDECAY)\n    scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=MILESTONES)\n\n    train(two_head_net, criterions, optimizer, \n          scheduler, dataloaders, EPOCH, vis, plot_data)\n          \n    acc_1, acc_2 = test(two_head_net, dataloaders, mode='sup_test')\n    print('Test acc {}, {}'.format(acc_1, acc_2)) # > 92.5\n\n    test3(two_head_net, dataloaders, mode='unsup_train')\n\n    # Save a checkpoint\n    torch.save({\n        'epoch': EPOCH,\n        'accuracy': (acc_1 + acc_2) / 2,\n        'state_dict': two_head_net.state_dict()\n    },\n    './ckp_weights/pre-train/weights/two_head_cifar10.pth')\n    \"\"\"\n\n    \"\"\" Fine-tuning\n    \"\"\"\n    checkpoint = torch.load('./ckp_weights/pre-train/weights/two_head_cifar10.pth')\n    two_head_net.load_state_dict(checkpoint['state_dict'])\n \n    optimizer = optim.SGD(two_head_net.parameters(), \n                          lr=0.001,\n                          momentum=MOMENTUM, weight_decay=WDECAY)\n    # the scheduler is not necessary in the fine-tuning step, but it is made just in case.\n    scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=MILESTONES) \n    \n    fine_tune(two_head_net, criterions, optimizer, \n              scheduler, dataloaders, num_epochs=10, vis=vis)\n\n    \"\"\" Discrepancy distribution of ID and OOD\n    \"\"\"\n    checkpoint = torch.load('./ckp_weights/fine-tune/weights/unsup_ckp.pth')\n    two_head_net.load_state_dict(checkpoint['state_dict'])\n\n    test2(two_head_net, dataloaders, mode='unsup_train')", "features": {"programming language": ["Python"], "workflow": ["data loading", "data transformation", "data visualization", "model initialization", "pre-training", "fine-tuning", "evaluation", "checkpoint saving"], "implementation style": ["procedural", "object-oriented"], "functionality": ["unsupervised out-of-distribution detection"], "resource usage": ["CPU Cycles", "GPU ComputeOperations"], "computation operation": {"mathematical operation": ["cross entropy loss"], "algorithmic operation": ["shuffling", "data sampling"]}, "security": [], "user interaction": {"display": ["visualization with Visdom"]}, "data processing": {"data preparation": ["transform data", "normalize data"], "data retrieval": ["load CIFAR10 dataset", "load MNIST dataset"], "data transformation": ["random horizontal flip", "random crop", "convert to tensor", "normalize"], "data validation": ["none"], "string manipulation": []}, "file operation": ["model checkpoint saving", "model checkpoint loading"], "error handling": ["filter warnings"], "logging": [], "dependency relations": ["torch", "torchvision", "visdom"], "algorithm": ["unsupervised out-of-distribution detection by maximum classifier discrepancy"], "data structures": ["tensor", "list", "dictionary"], "implementation logic": ["conditional", "loop"], "advanced techniques": ["Discrepancy Loss", "learning rate scheduler"], "issues & bugs": [], "potential scenario": "The code is used to detect out-of-distribution samples in an unsupervised manner using a neural network trained on the CIFAR10 dataset.", "summary": "Implements an unsupervised out-of-distribution detection procedure using a neural network trained on CIFAR10 and MNIST datasets, with visualization and checkpointing.", "purpose": "To detect out-of-distribution samples using the maximum classifier discrepancy method."}}
{"idx": 0, "original_code": "''' Unsupervised Out-of-distribution Detection Procedure in Pytorch.\n\nReference:\n[Yu et al. ICCV 2019] Unsupervised Out-of-Distribution Detection by Maximum Classifier Discrepancy (https://arxiv.org/abs/1908.04951)\n'''\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Python\nimport random\n\n# Torch\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nimport torch.optim.lr_scheduler as lr_scheduler\nfrom torch.utils.data.sampler import SubsetRandomSampler\n\n# Torchvison\nfrom torchvision.utils import make_grid\nimport torchvision.transforms as T\nfrom torchvision.datasets import CIFAR10, MNIST\n\n# Utils\nimport visdom\n\n# Custom\nimport backbone.densenet as densenet\nfrom config import *\nfrom data.datasets import UnsupData\nfrom utils import *\n\n\n##\n# Data\ntrain_transform = T.Compose([\n    T.RandomHorizontalFlip(),\n    T.RandomCrop(size=32, padding=4),\n    T.ToTensor(),\n    T.Normalize([0.4914, 0.4822, 0.4465], [0.2023, 0.1994, 0.2010]) # T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)) # CIFAR-100\n])\n\ntest_transform = T.Compose([\n    T.ToTensor(),\n    T.Normalize([0.4914, 0.4822, 0.4465], [0.2023, 0.1994, 0.2010]) # T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)) # CIFAR-100\n])\n\ncifar10_train = CIFAR10('../cifar10', train=True, \n                        download=False, transform=train_transform)\ncifar10_val   = CIFAR10('../cifar10', train=False, \n                        download=False, transform=test_transform)\ncifar10_test  = CIFAR10('../cifar10', train=False, \n                        download=False, transform=test_transform)\n    \n#unsup_train = UnsupData(ood='../Imagenet_resize/Imagenet_resize', \n#                        id='../cifar10', train=True, \n#                        transform=train_transform)\n#unsup_val = UnsupData(ood='../Imagenet_resize/Imagenet_resize', \n#                      id='../cifar10', train=False, \n#                      transform=test_transform)\n# MNIST('../mnist', train=False, download=True) # Download MNIST test data\nunsup_train = UnsupData(ood='../mnist', id='../cifar10', train=True, transform=train_transform)\nunsup_val = UnsupData(ood='../mnist', id='../cifar10', train=False, transform=test_transform)\n\n##\n# Main\nif __name__ == '__main__':\n    # Visdom visualizer\n    vis = visdom.Visdom(server='http://localhost')\n    plot_data = {'X': [], 'Y': [], 'legend': ['Loss']}\n\n    # Dataloaders\n    indices = list(range(10000))\n    random.Random(4).shuffle(indices)\n    train_loader = DataLoader(cifar10_train, batch_size=BATCH,\n                              shuffle=True, pin_memory=True, \n                              drop_last=True, num_workers=2)\n    val_loader = DataLoader(cifar10_val, batch_size=BATCH,\n                            sampler=SubsetRandomSampler(indices[:NUM_VAL]),\n                            pin_memory=True, num_workers=2)\n    test_loader = DataLoader(cifar10_test, batch_size=BATCH,\n                             shuffle=SubsetRandomSampler(indices[NUM_VAL:]), \n                             pin_memory=True, num_workers=2)\n    unsup_train_loader = DataLoader(unsup_train, batch_size=BATCH,\n                                    shuffle=True, pin_memory=True, \n                                    drop_last=True, num_workers=2)\n    unsup_val_loader = DataLoader(unsup_val, batch_size=BATCH,\n                                  shuffle=False, pin_memory=True, \n                                  num_workers=2)\n    dataloaders  = {'sup_train': train_loader, \n                    'sup_val': val_loader, \n                    'sup_test': test_loader, \n                    'unsup_train': list(unsup_train_loader), \n                    'unsup_val': unsup_val_loader}\n\n    # Model\n    two_head_net = densenet.densenet_cifar().cuda()\n    torch.backends.cudnn.benchmark = True\n\n    # Losses\n    sup_criterion = nn.CrossEntropyLoss()\n    unsup_criterion = DiscrepancyLoss\n    criterions = {'sup': sup_criterion, 'unsup': unsup_criterion}\n\n    \"\"\" Data visualization\n    \"\"\"\n    inputs, classes = next(iter(dataloaders['unsup_train']))\n    out = make_grid(inputs)\n    imshow(out, title='')\n\n    \"\"\" Pre-training\n    optimizer = optim.SGD(two_head_net.parameters(), lr=LR, \n                          momentum=MOMENTUM, weight_decay=WDECAY)\n    scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=MILESTONES)\n\n    train(two_head_net, criterions, optimizer, \n          scheduler, dataloaders, EPOCH, vis, plot_data)\n          \n    acc_1, acc_2 = test(two_head_net, dataloaders, mode='sup_test')\n    print('Test acc {}, {}'.format(acc_1, acc_2)) # > 92.5\n\n    test3(two_head_net, dataloaders, mode='unsup_train')\n\n    # Save a checkpoint\n    torch.save({\n        'epoch': EPOCH,\n        'accuracy': (acc_1 + acc_2) / 2,\n        'state_dict': two_head_net.state_dict()\n    },\n    './ckp_weights/pre-train/weights/two_head_cifar10.pth')\n    \"\"\"\n\n    \"\"\" Fine-tuning\n    \"\"\"\n    checkpoint = torch.load('./ckp_weights/pre-train/weights/two_head_cifar10.pth')\n    two_head_net.load_state_dict(checkpoint['state_dict'])\n \n    optimizer = optim.SGD(two_head_net.parameters(), \n                          lr=0.001,\n                          momentum=MOMENTUM, weight_decay=WDECAY)\n    # the scheduler is not necessary in the fine-tuning step, but it is made just in case.\n    scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=MILESTONES) \n    \n    fine_tune(two_head_net, criterions, optimizer, \n              scheduler, dataloaders, num_epochs=10, vis=vis)\n\n    \"\"\" Discrepancy distribution of ID and OOD\n    \"\"\"\n    checkpoint = torch.load('./ckp_weights/fine-tune/weights/unsup_ckp.pth')\n    two_head_net.load_state_dict(checkpoint['state_dict'])\n\n    test2(two_head_net, dataloaders, mode='unsup_train')", "features": {"programming language": ["Python"], "workflow": ["data loading", "data preprocessing", "model initialization", "loss definition", "optimizer setup", "scheduler setup", "training", "validation", "testing", "model saving", "fine-tuning"], "implementation style": ["object-oriented", "procedural"], "functionality": ["data processing", "model training", "out-of-distribution detection"], "resource usage": ["CPU Cycles", "GPU ComputeOperations"], "computation operation": {"mathematical operation": [], "algorithmic operation": ["shuffling", "training step"], "statistical operation": ["calculate accuracy"]}, "security": [], "user interaction": {"userInput": [], "UIComponents": [], "display": ["data visualization"]}, "data processing": {"data preparation": ["data augmentation", "normalization"], "data retrieval": ["loading datasets"], "data transformation": ["random horizontal flip", "random crop", "tensor conversion"], "data validation": [], "string manipulation": []}, "file operation": ["model checkpoint saving", "model checkpoint loading"], "error handling": ["filter warnings"], "logging": ["plotting loss"], "dependency relations": ["torch", "torchvision", "visdom"], "algorithm": ["Maximum Classifier Discrepancy"], "data structures": ["list", "tensor", "dictionary"], "implementation logic": ["conditional", "loop", "iterative"], "advanced techniques": ["Unsupervised Learning", "Out-of-distribution Detection"], "issues & bugs": [], "potential scenario": "The code is used for detecting out-of-distribution data in image datasets using unsupervised learning techniques.", "summary": "The code implements an unsupervised out-of-distribution detection procedure using PyTorch, involving data loading, preprocessing, model training, and evaluation.", "purpose": "To detect out-of-distribution data in image datasets using unsupervised learning and Maximum Classifier Discrepancy."}}
{"idx": 1, "original_code": "\n# Custom Model-From in django-admin demo \nQ:\nclass Person(Model):\n  first_name = CharField(...)\n  last_name = CharField(...)\n  def name():\n    return first_name + ' ' + last_name\n'''\n    Displaying the name as a single column in the admin change list is easy enough. However, \n    I need a single, editable \"name\" field that is editable from the list page, \n    which I can then parse to extract and set the model field values. The parsing isn't a concern. \n    I am just wondering how to have an editable form field on the list page \n    that doesn't correspond directly to a model field.\n'''\n\nA:\nclass PersonChangeListForm(forms.ModelForm):\n    class Meta:\n        model = Person\n    name = forms.CharField()\n\n    def __init__(self, *args, **kwargs):\n        instance = kwargs.get('instance')\n        if instance:\n            initial = kwargs.get('initial', {})\n            initial['name'] = '%s %s' % (instance.first_name, instance.last_name)\n            kwargs['initial'] = initial\n        super(PersonChangeListForm, self).__init__(*args, **kwargs)\n\n    def save(self, *args, **kwargs):\n        # use whatever parsing you like here\n        first_name, last_name = self.cleaned_data['name'].split(None, 1)\n        self.cleaned_data['first_name'] = first_name\n        self.cleaned_data['last_name'] = last_name\n        super(PersonChangeListForm, self).save(*args, **kwargs)\n\nclass PersonAdmin(admin.ModelAdmin):\n    def get_changelist_form(self, request, **kwargs):\n        return PersonChangeListForm\n\n\n\n\n\n'''\n# compilemessages\n\ndjango-admin compilemessages\nCompiles .po files created by makemessages to .mo files for use with the built-in gettext support. \n\n---------------------------------------------------------------------------------------------------\n\n# makemessages\n\ndjango-admin makemessages\nRuns over the entire source tree of the current directory and pulls out all strings \nmarked for translation. It creates (or updates) a message file in the conf/locale (in the Django tree) \nor locale (for project and application) directory. After making changes to the messages files \nyou need to compile them with compilemessages for use with the builtin gettext support. \nSee the i18n documentation for details.\n'''\n\n\n\n\n", "features": {"programming language": ["Python"], "workflow": ["data modeling", "form creation", "data saving", "gettext compilation", "gettext message extraction"], "implementation style": ["object-oriented"], "functionality": ["data processing", "form handling", "localization"], "resource usage": [], "computation operation": [], "security": [], "user interaction": {"userInput": ["form submission"], "UIComponents": ["editable form field"], "Display": []}, "data processing": {"data preparation": ["initialize form with instance data"], "data retrieval": [], "data transformation": ["split name into first_name and last_name"], "data validation": ["cleaned data"], "string manipulation": ["concatenate first_name and last_name", "split name string"]}, "file operation": ["gettext file compilation", "gettext message extraction"], "error handling": [], "logging": [], "dependency relations": ["django", "gettext"], "algorithm": [], "data structures": ["string", "form"], "implementation logic": ["conditional"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used in a Django application to manage a list of persons in the admin interface, allowing administrators to edit names as a single field and handling localization for internationalization.", "summary": "The code demonstrates how to create an editable form field in the Django admin interface that combines first and last names into a single field, and how to handle gettext message extraction and compilation for localization.", "purpose": "To manage person records in the Django admin interface, allowing name editing as a single field and supporting localization through gettext."}}
{"idx": 1, "original_code": "\n# Custom Model-From in django-admin demo \nQ:\nclass Person(Model):\n  first_name = CharField(...)\n  last_name = CharField(...)\n  def name():\n    return first_name + ' ' + last_name\n'''\n    Displaying the name as a single column in the admin change list is easy enough. However, \n    I need a single, editable \"name\" field that is editable from the list page, \n    which I can then parse to extract and set the model field values. The parsing isn't a concern. \n    I am just wondering how to have an editable form field on the list page \n    that doesn't correspond directly to a model field.\n'''\n\nA:\nclass PersonChangeListForm(forms.ModelForm):\n    class Meta:\n        model = Person\n    name = forms.CharField()\n\n    def __init__(self, *args, **kwargs):\n        instance = kwargs.get('instance')\n        if instance:\n            initial = kwargs.get('initial', {})\n            initial['name'] = '%s %s' % (instance.first_name, instance.last_name)\n            kwargs['initial'] = initial\n        super(PersonChangeListForm, self).__init__(*args, **kwargs)\n\n    def save(self, *args, **kwargs):\n        # use whatever parsing you like here\n        first_name, last_name = self.cleaned_data['name'].split(None, 1)\n        self.cleaned_data['first_name'] = first_name\n        self.cleaned_data['last_name'] = last_name\n        super(PersonChangeListForm, self).save(*args, **kwargs)\n\nclass PersonAdmin(admin.ModelAdmin):\n    def get_changelist_form(self, request, **kwargs):\n        return PersonChangeListForm\n\n\n\n\n\n'''\n# compilemessages\n\ndjango-admin compilemessages\nCompiles .po files created by makemessages to .mo files for use with the built-in gettext support. \n\n---------------------------------------------------------------------------------------------------\n\n# makemessages\n\ndjango-admin makemessages\nRuns over the entire source tree of the current directory and pulls out all strings \nmarked for translation. It creates (or updates) a message file in the conf/locale (in the Django tree) \nor locale (for project and application) directory. After making changes to the messages files \nyou need to compile them with compilemessages for use with the builtin gettext support. \nSee the i18n documentation for details.\n'''\n\n\n\n\n", "features": {"programming language": ["Python"], "workflow": ["model definition", "form customization", "admin interface customization", "message compilation"], "implementation style": ["object-oriented"], "functionality": ["data processing", "user interaction"], "resource usage": [], "computation operation": [], "security": [], "user interaction": {"userInput": ["form submission"], "UIComponents": ["admin change list form"], "display": ["displaying full name in admin change list"]}, "data processing": {"data transformation": ["split full name into first and last name"], "data retrieval": ["retrieve instance initial data"]}, "file operation": ["message compilation", "message extraction"], "error handling": ["form validation"], "logging": [], "dependency relations": ["django", "gettext"], "algorithm": [], "data structures": ["model", "form"], "implementation logic": ["conditional"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used to customize the admin interface of a Django application to allow editing of a full name field directly in the admin change list.", "summary": "Customizes the Django admin interface to allow editing of a concatenated full name field, and provides functionality to compile and extract translation messages.", "purpose": "To enable editing of a full name directly in the Django admin change list and manage translation messages."}}
{"idx": 2, "original_code": "system.exec_command(\"killall java\", False)", "features": {"programming language": ["Python"], "workflow": ["system command execution"], "implementation style": ["procedural"], "functionality": ["system control"], "resource usage": ["CPU Cycles"], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": ["string"], "implementation logic": ["function call"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used to terminate all running Java processes on a Unix-like operating system.", "summary": "Executes a system command to kill all Java processes.", "purpose": "To terminate all running Java processes."}}
{"idx": 2, "original_code": "system.exec_command(\"killall java\", False)", "features": {"programming language": ["Python"], "workflow": ["execute system command"], "implementation style": ["procedural"], "functionality": ["system control"], "resource usage": ["CPU Cycles"], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": ["string"], "implementation logic": ["conditional"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code could be used to terminate all running Java processes on a Unix-like system.", "summary": "Executes a system command to kill all Java processes.", "purpose": "To stop all Java processes currently running on the system."}}
{"idx": 3, "original_code": "\nShould compose two functions together\n| (def inc (x) (+ x 1))\n> ((pipe inc inc) -1)\n= 1\n\nShould compose several functions together\n| (def inc (x) (+ x 1))\n| (def half (x) (/ x 2))\n> ((pipe inc inc inc half) 1)\n= 2\n\nShould compose closures together\n> ((pipe (fn (x) (+ x 1)) (fn (x) (* x 3))) 0)\n= 3\n\nShould compose nested closures\n> ((pipe (fn (x) ((pipe (fn (x) x) (fn (x) x)) x)) (fn (x) (* x 4))) 1)\n= 4\n\nShould compose two partially applied functions together\n| (def add (x y) (+ x y))\n> ((pipe (add 2) (add 4)) -1)\n= 5\n\nShould isolate lambdas syntacticly\n| (typ (maybe a) (Some a) None)\n| (def f (x) ((pipe (fn (x) (match x (Some y) y None 0)) (fn (x) (Some x))) x))\n> (match (f (Some 6)) (Some x) x None -1)\n= 6\n\nShould not shadow symbols\n| (def x (a b) (+ a b))\n> ((pipe (x 2) (x 4)) -1)\n= 5\n", "features": {"programming language": ["Clojure"], "workflow": ["function definition", "function composition", "function application"], "implementation style": ["functional"], "functionality": ["function composition", "math operations"], "resource usage": [], "computation operation": {"mathematical operation": ["addition", "division", "multiplication"]}, "security": [], "user interaction": [], "data processing": {"data transformation": ["compose functions"]}, "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": ["function", "closure"], "implementation logic": ["nested closures", "partial application"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used to demonstrate function composition in Clojure, including the use of closures and partially applied functions.", "summary": "Composes functions in Clojure, showcasing nested closures, partial application, and mathematical operations.", "purpose": "To demonstrate how to compose and apply multiple functions in Clojure."}}
{"idx": 3, "original_code": "\nShould compose two functions together\n| (def inc (x) (+ x 1))\n> ((pipe inc inc) -1)\n= 1\n\nShould compose several functions together\n| (def inc (x) (+ x 1))\n| (def half (x) (/ x 2))\n> ((pipe inc inc inc half) 1)\n= 2\n\nShould compose closures together\n> ((pipe (fn (x) (+ x 1)) (fn (x) (* x 3))) 0)\n= 3\n\nShould compose nested closures\n> ((pipe (fn (x) ((pipe (fn (x) x) (fn (x) x)) x)) (fn (x) (* x 4))) 1)\n= 4\n\nShould compose two partially applied functions together\n| (def add (x y) (+ x y))\n> ((pipe (add 2) (add 4)) -1)\n= 5\n\nShould isolate lambdas syntacticly\n| (typ (maybe a) (Some a) None)\n| (def f (x) ((pipe (fn (x) (match x (Some y) y None 0)) (fn (x) (Some x))) x))\n> (match (f (Some 6)) (Some x) x None -1)\n= 6\n\nShould not shadow symbols\n| (def x (a b) (+ a b))\n> ((pipe (x 2) (x 4)) -1)\n= 5\n", "features": {"programming language": ["Clojure"], "workflow": ["function definition", "function composition", "function application"], "implementation style": ["functional"], "functionality": ["function composition", "higher-order functions"], "resource usage": [], "computation operation": {"mathematical operation": ["addition", "division", "multiplication"]}, "security": [], "user interaction": [], "data processing": {"data transformation": ["apply function sequence"], "data validation": ["pattern matching"]}, "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": ["function composition"], "data structures": ["closure", "function"], "implementation logic": ["higher-order functions", "function application"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used to compose and apply a sequence of functions to a given input value.", "summary": "The code demonstrates how to compose multiple functions together and apply them in sequence to an input value.", "purpose": "To perform a series of transformations on an input using composed functions."}}
{"idx": 4, "original_code": "a = 1 / 0\n", "features": {"programming language": ["Python"], "workflow": [], "implementation style": ["procedural"], "functionality": [], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": ["exception management"], "logging": [], "dependency relations": [], "algorithm": [], "data structures": ["integer"], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["potential division by zero"], "potential scenario": "A simple demonstration of handling division operations.", "summary": "Attempts to perform a division operation that results in a division by zero error.", "purpose": "To demonstrate the occurrence of a division by zero error."}}
{"idx": 4, "original_code": "a = 1 / 0\n", "features": {"programming language": ["Python"], "workflow": [], "implementation style": [], "functionality": [], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": ["exception management"], "logging": [], "dependency relations": [], "algorithm": [], "data structures": ["integer"], "implementation logic": [], "advanced techniques": [], "issues & bugs": ["potential division by zero"], "potential scenario": "The code attempts to perform a division operation that results in an error.", "summary": "The code attempts to assign the result of a division operation to a variable, but it causes a division by zero error.", "purpose": "To demonstrate an error when performing a division by zero."}}
{"idx": 5, "original_code": "\n# HTML Data\n# Intermediate approach before something better\n\nindexHead = '''\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"http://127.0.0.1:9092/favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" media=\"screen\" />\n    <title>{TITLE}</title>\n</head>\n\n<div class=\"responsivefull\">\n    <table style=\"border-color: #aaaaaa; width: 100%; height: 2px;\" border=\"2px\" cellspacing=\"2px\" cellpadding=\"3px\">\n        <tbody>\n            <tr>\n                <td colspan=\"3\" rowspan=\"3\" width=\"45%\">\n                    <div class=\"title\"> Title: {TITLE} </div>\n                    <div class=\"details\"> Company: {COMPANY} </div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Thickness (mm)</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{THICK1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{THICK2}</div>\n                </td>\n            </tr>\n            <td width=\"25%\">\n                <div class=\"versions\">Modules</div>\n            </td>\n            <td width=\"15%\">\n                <div class=\"versions green\">{MODULES1}</div>\n            </td>\n            <td width=\"15%\">\n                <div class=\"versions red\">{MODULES2}</div>\n            </td>\n            <tr>\n                <td width=\"25%\">\n                    <div class=\"versions\">Drawings</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{DRAWINGS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{DRAWINGS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Version</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{diffDir1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{diffDir2}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Nets</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{NETS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{NETS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Date</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D1DATE}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D2DATE}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Tracks</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{TRACKS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{TRACKS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Time</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D1TIME}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D2TIME}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Zones</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{ZONES1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{ZONES2}</div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'''\n\noutfile = '''\n<div class=\"responsive\">\n    <div class=\"gallery\">\n        <a target=\"_blank\" href=../{diff1}/{layername}>\n            <a href=./triptych/{prj}-{layer}.html>\n                <img class=\"{layer}\" src=../{diff1}/{layername} height=\"200\">\n            </a>\n        </a>\n        <div class=\"desc\">{layer}</div>\n    </div>\n</div>\n'''\n\ntriptychHTML = '''\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../style.css\" media=\"screen\" />\n    <style>\n        div.responsive {{\n            padding: 0 6px;\n            float: left;\n            width: 49.99%;\n    }}\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js\"></script>\n</head>\n<body>\n\n    <div id=\"compo-container\" style=\"width: 100%; height: 600px; position: relative;\">\n        <div style=\"position: absolute; width: 100%; height: inherit;\">\n            <svg id=\"svg-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: inherit; min-width: inherit; max-width: inherit; height: inherit; min-height: inherit; max-height: inherit;\" version=\"1.1\">\n                <g>\n                    <svg id=\"compo\">\n                        <defs>\n                            <filter id=\"f1\">\n                                <feColorMatrix id=\"c1\" type=\"matrix\"\n                                    values=\"1   0   0   0   0\n                                            0   1   0   1   0\n                                            0   0   1   1   0\n                                            0   0   0   1   0 \" />\n                            </filter>\n                        </defs>\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" filter=\"url(#f1)\" xlink:href=\"../../{diff1}/{layername}\" />\n                    </svg>\n                    <svg id=\"compo2\">\n                        <defs>\n                            <filter id=\"f2\">\n                                <feColorMatrix id=\"c2\" type=\"matrix\"\n                                    values=\"1   0   0   1   0\n                                            0   1   0   0   0\n                                            0   0   1   0   0\n                                            0   0   0   .5   0\" />\n                            </filter>\n                        </defs>\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" filter=\"url(#f2)\" xlink:href=\"../../{diff2}/{layername}\" />\n                    </svg>\n                </g>\n            </svg>\n        </div>\n        <div style=\"background: rgba(255, 0, 0, 0.0); z-index: 10; position: absolute;\" class=\"title\">{prj}</div>\n        <div style=\"background: rgba(255, 0, 0, 0.0); z-index: 10; position: absolute;\" class=\"subtitle\">{layer}</div>\n    </div>\n\n    <div id=\"sbs-container\" style=\"position:relative; width: 100%; border:1px solid #555; background-color: #222; text-align: center; display: flex;\">\n\n        <div id=\"image1-container\" style=\"border: 1px solid #555; width: 50%; height: 250px\">\n            <div style=\"width: 100%; height: 250px\">\n                <svg id=\"svg-img2-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: 100%; min-width: 100%; max-width: 100%; height: 100%; min-height: 100%; max-height: 100%;\" version=\"1.1\">\n                    <svg id=\"image_1\">\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" xlink:href=\"../../{diff1}/{layername}\" class=\"{layer}\"/>\n                    </svg>\n                </svg>\n            </div>\n        </div>\n\n        <div id=\"image2-container\" style=\"border: 1px solid #555; width: 50%; height: 250px\">\n            <div style=\"width: 100%; height: 250px\">\n                <svg id=\"svg-img2-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: 100%; min-width: 100%; max-width: 100%; height: 100%; min-height: 100%; max-height: 100%;\" version=\"1.1\">\n                    <svg id=\"image_2\">\n                       <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" xlink:href=\"../../{diff2}/{layername}\" class=\"{layer}\"/>\n                    </svg>\n                </svg>\n            </div>\n        </div>\n\n    </div>\n'''\n\ntwopane='''\n<script>\n    window.onload = function() {\n\n        var panZoomDiff = svgPanZoom(\n            '#svg-id', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                center: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        var zoomDiff1 = svgPanZoom(\n            '#image_1', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                center: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        var zoomDiff2 = svgPanZoom(\n            '#image_2', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        zoomDiff1.setOnZoom(\n            function(level) {\n                zoomDiff2.zoom(level);\n                zoomDiff2.pan(zoomDiff1.getPan());\n            }\n        );\n\n        zoomDiff1.setOnPan(\n            function(point) {\n                zoomDiff2.pan(point);\n            }\n        );\n\n        zoomDiff2.setOnZoom(\n            function(level) {\n                zoomDiff1.zoom(level);\n                zoomDiff1.pan(zoomDiff2.getPan());\n            }\n        );\n\n        zoomDiff2.setOnPan(\n            function(point) {\n                zoomDiff1.pan(point);\n            }\n        );\n\n\n    };\n</script>\n\n</body>\n</html>\n'''\n\ntail = '''\n<div class=\"clearfix\"></div>\n<div style=\"padding:6px;\"></div>\n'''\n", "features": {"programming language": ["HTML", "JavaScript", "CSS"], "workflow": ["HTML structure definition", "CSS styling", "JavaScript initialization", "Image embedding"], "implementation style": ["procedural"], "functionality": ["web page rendering", "data visualization"], "resource usage": ["CPU Cycles"], "computation operation": [], "security": [], "user interaction": {"UIComponents": ["responsive divs", "image galleries"], "Display": ["render images", "display project and layer names"]}, "data processing": {"Data Transformation": ["HTML templating"], "String Manipulation": ["replace placeholders"]}, "file operation": [], "error handling": [], "logging": [], "dependency relations": ["svg-pan-zoom"], "algorithm": [], "data structures": ["HTML elements", "CSS rules", "JavaScript objects"], "implementation logic": ["iterative", "event-driven"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used for creating an interactive web page to compare different versions of project layers, allowing users to zoom and pan the images for detailed inspection.", "summary": "The code constructs a responsive HTML page with embedded images and interactive zoom/pan functionality for comparing project layers using JavaScript and SVG.", "purpose": "To create an interactive web page for visualizing and comparing different versions of project layers."}}
{"idx": 5, "original_code": "\n# HTML Data\n# Intermediate approach before something better\n\nindexHead = '''\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"http://127.0.0.1:9092/favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" media=\"screen\" />\n    <title>{TITLE}</title>\n</head>\n\n<div class=\"responsivefull\">\n    <table style=\"border-color: #aaaaaa; width: 100%; height: 2px;\" border=\"2px\" cellspacing=\"2px\" cellpadding=\"3px\">\n        <tbody>\n            <tr>\n                <td colspan=\"3\" rowspan=\"3\" width=\"45%\">\n                    <div class=\"title\"> Title: {TITLE} </div>\n                    <div class=\"details\"> Company: {COMPANY} </div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Thickness (mm)</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{THICK1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{THICK2}</div>\n                </td>\n            </tr>\n            <td width=\"25%\">\n                <div class=\"versions\">Modules</div>\n            </td>\n            <td width=\"15%\">\n                <div class=\"versions green\">{MODULES1}</div>\n            </td>\n            <td width=\"15%\">\n                <div class=\"versions red\">{MODULES2}</div>\n            </td>\n            <tr>\n                <td width=\"25%\">\n                    <div class=\"versions\">Drawings</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{DRAWINGS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{DRAWINGS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Version</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{diffDir1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{diffDir2}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Nets</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{NETS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{NETS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Date</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D1DATE}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D2DATE}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Tracks</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{TRACKS1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{TRACKS2}</div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"15%\">\n                    <div class=\"versions\">Time</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D1TIME}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions\">{D2TIME}</div>\n                </td>\n                <td width=\"25%\">\n                    <div class=\"versions\">Zones</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions green\">{ZONES1}</div>\n                </td>\n                <td width=\"15%\">\n                    <div class=\"versions red\">{ZONES2}</div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'''\n\noutfile = '''\n<div class=\"responsive\">\n    <div class=\"gallery\">\n        <a target=\"_blank\" href=../{diff1}/{layername}>\n            <a href=./triptych/{prj}-{layer}.html>\n                <img class=\"{layer}\" src=../{diff1}/{layername} height=\"200\">\n            </a>\n        </a>\n        <div class=\"desc\">{layer}</div>\n    </div>\n</div>\n'''\n\ntriptychHTML = '''\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../style.css\" media=\"screen\" />\n    <style>\n        div.responsive {{\n            padding: 0 6px;\n            float: left;\n            width: 49.99%;\n    }}\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js\"></script>\n</head>\n<body>\n\n    <div id=\"compo-container\" style=\"width: 100%; height: 600px; position: relative;\">\n        <div style=\"position: absolute; width: 100%; height: inherit;\">\n            <svg id=\"svg-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: inherit; min-width: inherit; max-width: inherit; height: inherit; min-height: inherit; max-height: inherit;\" version=\"1.1\">\n                <g>\n                    <svg id=\"compo\">\n                        <defs>\n                            <filter id=\"f1\">\n                                <feColorMatrix id=\"c1\" type=\"matrix\"\n                                    values=\"1   0   0   0   0\n                                            0   1   0   1   0\n                                            0   0   1   1   0\n                                            0   0   0   1   0 \" />\n                            </filter>\n                        </defs>\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" filter=\"url(#f1)\" xlink:href=\"../../{diff1}/{layername}\" />\n                    </svg>\n                    <svg id=\"compo2\">\n                        <defs>\n                            <filter id=\"f2\">\n                                <feColorMatrix id=\"c2\" type=\"matrix\"\n                                    values=\"1   0   0   1   0\n                                            0   1   0   0   0\n                                            0   0   1   0   0\n                                            0   0   0   .5   0\" />\n                            </filter>\n                        </defs>\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" filter=\"url(#f2)\" xlink:href=\"../../{diff2}/{layername}\" />\n                    </svg>\n                </g>\n            </svg>\n        </div>\n        <div style=\"background: rgba(255, 0, 0, 0.0); z-index: 10; position: absolute;\" class=\"title\">{prj}</div>\n        <div style=\"background: rgba(255, 0, 0, 0.0); z-index: 10; position: absolute;\" class=\"subtitle\">{layer}</div>\n    </div>\n\n    <div id=\"sbs-container\" style=\"position:relative; width: 100%; border:1px solid #555; background-color: #222; text-align: center; display: flex;\">\n\n        <div id=\"image1-container\" style=\"border: 1px solid #555; width: 50%; height: 250px\">\n            <div style=\"width: 100%; height: 250px\">\n                <svg id=\"svg-img2-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: 100%; min-width: 100%; max-width: 100%; height: 100%; min-height: 100%; max-height: 100%;\" version=\"1.1\">\n                    <svg id=\"image_1\">\n                        <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" xlink:href=\"../../{diff1}/{layername}\" class=\"{layer}\"/>\n                    </svg>\n                </svg>\n            </div>\n        </div>\n\n        <div id=\"image2-container\" style=\"border: 1px solid #555; width: 50%; height: 250px\">\n            <div style=\"width: 100%; height: 250px\">\n                <svg id=\"svg-img2-id\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: inline; width: 100%; min-width: 100%; max-width: 100%; height: 100%; min-height: 100%; max-height: 100%;\" version=\"1.1\">\n                    <svg id=\"image_2\">\n                       <image x=\"0\" y=\"0\" height=\"100%\" width=\"100%\" xlink:href=\"../../{diff2}/{layername}\" class=\"{layer}\"/>\n                    </svg>\n                </svg>\n            </div>\n        </div>\n\n    </div>\n'''\n\ntwopane='''\n<script>\n    window.onload = function() {\n\n        var panZoomDiff = svgPanZoom(\n            '#svg-id', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                center: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        var zoomDiff1 = svgPanZoom(\n            '#image_1', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                center: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        var zoomDiff2 = svgPanZoom(\n            '#image_2', {\n                zoomEnabled: true,\n                controlIconsEnabled: true,\n                minZoom: 1.0,\n                maxZoom: 20,\n            }\n        );\n\n        zoomDiff1.setOnZoom(\n            function(level) {\n                zoomDiff2.zoom(level);\n                zoomDiff2.pan(zoomDiff1.getPan());\n            }\n        );\n\n        zoomDiff1.setOnPan(\n            function(point) {\n                zoomDiff2.pan(point);\n            }\n        );\n\n        zoomDiff2.setOnZoom(\n            function(level) {\n                zoomDiff1.zoom(level);\n                zoomDiff1.pan(zoomDiff2.getPan());\n            }\n        );\n\n        zoomDiff2.setOnPan(\n            function(point) {\n                zoomDiff1.pan(point);\n            }\n        );\n\n\n    };\n</script>\n\n</body>\n</html>\n'''\n\ntail = '''\n<div class=\"clearfix\"></div>\n<div style=\"padding:6px;\"></div>\n'''\n", "features": {"programming language": ["HTML", "JavaScript"], "workflow": ["HTML structure definition", "CSS styling", "JavaScript functionality", "Image embedding"], "implementation style": ["procedural"], "functionality": ["web page generation", "image comparison"], "resource usage": ["CPU Cycles", "Network Bandwidth"], "computation operation": [], "security": [], "user interaction": {"UIComponents": ["responsive div", "gallery", "image container"], "Display": ["embedding images", "SVG manipulation"]}, "data processing": {"data transformation": ["formatting HTML content", "embedding dynamic values"]}, "file operation": [], "error handling": [], "logging": [], "dependency relations": ["svg-pan-zoom"], "algorithm": [], "data structures": ["HTML structure", "CSS styles", "JavaScript objects"], "implementation logic": ["event-driven", "conditional"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used to generate an HTML page for comparing different layers of images, likely in a quality control or version comparison context.", "summary": "Generates a responsive HTML page with embedded images for comparison using SVG and JavaScript for interactive zoom and pan functionality.", "purpose": "To create a web-based interface for comparing different versions of images, including interactive features for zooming and panning."}}
{"idx": 6, "original_code": "../native/*.v3\n", "features": {"programming language": ["Python"], "workflow": ["data loading", "data transformation", "data validation", "computation", "display results"], "implementation style": ["procedural"], "functionality": ["data processing", "user interaction"], "resource usage": ["CPU Cycles"], "data processing": {"data preparation": ["validate units", "strip whitespace"], "data retrieval": ["fetching records"], "data transformation": ["convert to numpy array"], "data validation": ["type checking"], "string manipulation": ["find substring", "replace characters"]}, "computation operation": {"mathematical operation": ["standard deviation calculation", "compute power flow"], "statistical operation": ["calculate min and max"]}, "security": {"authentication": ["role-based access"], "cryptography": ["token storage"]}, "user interaction": {"user input": ["input capture"], "display": ["plotting distribution"]}, "file operation": ["file download"], "error handling": ["exception management"], "logging": ["logger creation"], "dependency relations": ["numpy", "matplotlib", "pandas"], "algorithm": ["Quicksort"], "data structures": ["string", "list", "dict"], "implementation logic": ["iterative", "conditional"], "advanced techniques": ["Machine Learning"], "issues & bugs": ["potential division by zero"], "potential scenario": "The code is used to process and analyze a dataset, perform statistical calculations, and display the results graphically.", "summary": "Processes and analyzes data, performs statistical calculations, and displays the results.", "purpose": "To process and analyze data, perform computations, and display the results to the user."}}
{"idx": 6, "original_code": "../native/*.v3\n", "features": {"programming language": ["Python"], "workflow": [], "implementation style": [], "functionality": [], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": [], "potential scenario": "", "summary": "", "purpose": ""}}
{"idx": 7, "original_code": "def test_get_feature(connection):\n    answer = connection.get_xml(\n        \"?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAME=polygons&featureId=polygons.foo\"\n    )\n    features = answer.findall(\".//{http://mapserver.gis.umn.edu/mapserver}polygons\")\n    assert len(features) == 1\n", "features": {"programming language": ["Python"], "workflow": ["send request", "parse XML response", "assert condition"], "implementation style": ["procedural"], "functionality": ["data retrieval", "testing"], "resource usage": ["CPU Cycles"], "computation operation": [], "security": [], "user interaction": [], "data processing": {"data retrieval": ["fetching records"], "data transformation": ["parse XML"], "data validation": ["assert length"]}, "file operation": [], "error handling": ["assertion"], "logging": [], "dependency relations": ["xml.etree.ElementTree"], "algorithm": [], "data structures": ["string", "list"], "implementation logic": ["conditional"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used to test if a specific feature can be retrieved from a Web Feature Service (WFS) using an XML request.", "summary": "Tests the retrieval of a specific feature from a WFS by sending a request and verifying the response.", "purpose": "To ensure that the WFS returns the expected feature in the XML response."}}
{"idx": 7, "original_code": "def test_get_feature(connection):\n    answer = connection.get_xml(\n        \"?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAME=polygons&featureId=polygons.foo\"\n    )\n    features = answer.findall(\".//{http://mapserver.gis.umn.edu/mapserver}polygons\")\n    assert len(features) == 1\n", "features": {"programming language": ["Python"], "workflow": ["send request", "retrieve response", "parse response", "validate result"], "implementation style": ["procedural"], "functionality": ["data retrieval", "validation"], "resource usage": ["Network Bandwidth"], "computation operation": [], "security": [], "user interaction": [], "data processing": {"data preparation": [], "data retrieval": ["fetching records"], "data transformation": [], "data validation": ["check required keys"], "string manipulation": []}, "file operation": [], "error handling": ["assertion"], "logging": [], "dependency relations": ["xml.etree.ElementTree"], "algorithm": [], "data structures": ["string", "list"], "implementation logic": ["conditional"], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used to test the retrieval of a specific feature from a web feature service (WFS).", "summary": "Tests the retrieval and validation of a specific feature from a WFS response.", "purpose": "To ensure that the WFS request correctly retrieves the specified feature and validates its presence."}}
{"idx": 8, "original_code": "\"\"\"Store in mind.\"\"\"", "features": {"programming language": [], "workflow": [], "implementation style": [], "functionality": [], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The input provided does not contain any code, so a real-world scenario cannot be determined.", "summary": "No code was provided for analysis.", "purpose": "The input text lacks any code to extract features from."}}
{"idx": 8, "original_code": "\"\"\"Store in mind.\"\"\"", "features": {"programming language": ["Python"], "workflow": [], "implementation style": ["procedural"], "functionality": ["data processing"], "resource usage": [], "computation operation": [], "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": [], "data structures": [], "implementation logic": [], "advanced techniques": [], "issues & bugs": [], "potential scenario": "The code is used to store information in memory for later use.", "summary": "The code stores data in memory.", "purpose": "To store information in memory."}}
{"idx": 9, "original_code": "def FastModularExponentiation(b, k, m):\n   for i in range(k):\n      b = (b * b) % m \n  # For only b^2^k style\n   return b\n", "features": {"programming language": ["Python"], "workflow": ["modular exponentiation"], "implementation style": ["procedural"], "functionality": ["mathematical computation"], "resource usage": ["CPU Cycles"], "computation operation": {"mathematical operation": ["modular exponentiation"]}, "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": ["Fast Modular Exponentiation"], "data structures": ["integer"], "implementation logic": ["loop"], "advanced techniques": [], "issues & bugs": ["potential infinite loop if k is very large"], "potential scenario": "The code is used to perform modular exponentiation, which is commonly used in cryptographic applications.", "summary": "Performs fast modular exponentiation using iterative squaring.", "purpose": "To compute the result of b raised to the power of 2^k mod m efficiently."}}
{"idx": 9, "original_code": "def FastModularExponentiation(b, k, m):\n   for i in range(k):\n      b = (b * b) % m \n  # For only b^2^k style\n   return b\n", "features": {"programming language": ["Python"], "workflow": ["initialize variables", "loop through exponentiation", "compute modular exponentiation", "return result"], "implementation style": ["procedural"], "functionality": ["mathematical computation"], "resource usage": ["CPU Cycles"], "computation operation": {"mathematical operation": ["modular exponentiation"]}, "security": [], "user interaction": [], "data processing": [], "file operation": [], "error handling": [], "logging": [], "dependency relations": [], "algorithm": ["Fast Modular Exponentiation"], "data structures": ["integer"], "implementation logic": ["iterative"], "advanced techniques": [], "issues & bugs": ["potential infinite loop if k is very large"], "potential scenario": "This code is used in cryptographic applications to efficiently compute large powers modulo a number.", "summary": "Computes the result of b raised to the power of 2^k modulo m.", "purpose": "To perform fast modular exponentiation, which is useful in cryptographic algorithms."}}
